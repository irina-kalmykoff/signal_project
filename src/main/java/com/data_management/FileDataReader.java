package com.data_management;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

/**
 * Implements a class that fulfills the DataReader interface
 * capable of reading data from output files generated by the HealthDataSimulator
 */
public class FileDataReader implements DataReader {

    private final String outputDirectory;

    /**
     * Creates a new FileDataReader that reads data files from the specified directory
     *
     * @param outputDirectory the directory containing data files
     */
    public FileDataReader(String outputDirectory) {
        this.outputDirectory = outputDirectory;
    }

    @Override
    public void readData(DataStorage dataStorage) throws IOException {
        Path directoryPath = Paths.get(outputDirectory);

        // Check if directory exists
        if (!Files.exists(directoryPath) || !Files.isDirectory(directoryPath)) {
            throw new IOException("Output directory does not exist: " + outputDirectory);
        }

        // Process all files in the directory
        Files.list(directoryPath)
                .filter(Files::isRegularFile)
                .forEach(file -> {
                    try {
                        processFile(file, dataStorage);
                    } catch (IOException e) {
                        System.err.println("Error processing file: " + file + ": " + e.getMessage());
                    }
                });
    }

    /**
     * Processes a single data file and adds its records to the data storage
     *
     * @param filePath path to the file to process
     * @param dataStorage the data storage to add records to
     * @throws IOException if there is an error reading the file
     */
    private void processFile(Path filePath, DataStorage dataStorage) throws IOException {
        // Read the file content
        List<String> lines = Files.readAllLines(filePath);

        // Parse each line and add to storage
        for (String line : lines) {
            try {
                // Expecting format: patientId,timestamp,recordType,value
                String[] parts = line.split(",");

                if (parts.length >= 4) {
                    int patientId = Integer.parseInt(parts[0]);
                    long timestamp = Long.parseLong(parts[1]);
                    String recordType = parts[2];
                    String valueStr = parts[3];

                    // For "Alert" type, handle it as a special case
                    if ("Alert".equals(recordType)) {
                        try {
                            double alertValue = Double.parseDouble(valueStr); // Try to parse as double
                            // Add the data to storage
                            dataStorage.addPatientData(patientId, alertValue, recordType, timestamp);
                        } catch (NumberFormatException e) {
                            // If it's not a number (e.g., "triggered"), we'll convert it
                            double alertValue = valueStr.equalsIgnoreCase("triggered") ? 1.0 : 0.0;
                            dataStorage.addPatientData(patientId, alertValue, recordType, timestamp);
                        }
                    } else {
                        // For numerical values, parse as double
                        try {
                            double value = Double.parseDouble(valueStr);
                            // Add the data to storage
                            dataStorage.addPatientData(patientId, value, recordType, timestamp);
                        } catch (NumberFormatException e) {
                            System.err.println("Non-numeric value for record type " + recordType + ": " + valueStr);
                            // Skip this record
                            continue;
                        }
                    }
                } else {
                    System.err.println("Invalid data format in line: " + line);
                }
            } catch (NumberFormatException e) {
                System.err.println("Error parsing numeric values in line: " + line + ": " + e.getMessage());
            }
        }
    }
}